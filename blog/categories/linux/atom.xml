<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Mandus Momberg's Blog]]></title>
  <link href="http://blog.mandusmomberg.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.mandusmomberg.com/"/>
  <updated>2015-05-11T21:55:28+02:00</updated>
  <id>http://blog.mandusmomberg.com/</id>
  <author>
    <name><![CDATA[Mandus Momberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tis the Season of Wifi]]></title>
    <link href="http://blog.mandusmomberg.com/blog/2014/12/15/tis-the-season-of-wifi/"/>
    <updated>2014-12-15T21:15:07+02:00</updated>
    <id>http://blog.mandusmomberg.com/blog/2014/12/15/tis-the-season-of-wifi</id>
    <content type="html"><![CDATA[<p>Every year in December my family and I go to a small coastal town in the Western Cape. It&rsquo;s a wonderful little town and the weather is perfect for what you would expect from a South African Summer Holiday, but there is one small problem&hellip; No proper internet. Being the tech-head in the family, I was once again turned to, to solve the problem. Luckilly I had a Raspberry Pi, D-Link USB Wifi Adapter and Huawei 3G Dongle in my laptop bag&hellip;</p>

<!--more-->


<p></p>

<h3>Some More Turkey Please</h3>

<p>So to set the scene a little better, my family uses more data on their Smart Phones than the contigual United States consumes turkey on Thanks Giving. It&rsquo;s a <code>stupid</code> amount of data and usually its by posting and downloading images of lolcats on social media sites like Facebook, and commenting on the other family members&#8217; bad use of grammar.</p>

<p>This is a fine hobby when at home, since all of them have ADSL and WiFi at home, but here, they are burning through their mobile data bundles like a wildfire in the African Bushveld.</p>

<h3>Please Sir, Can I have some Pi?</h3>

<p>Safe to say, I had to jump in an do something before my whole family spent their holiday budgets on 3G Data Bundles, but I only had limited hardware at my disposal. More specifically, a Raspberry Pi, D-Link USB WiFi Adapter and the Huawei K4305 Vodafone USB 3G Dongle I travel with. Being the MacGuyver-generation guy that I am, I figured if you hand me a toothpic and a hotpocket, I can do this! And I mean, it&rsquo;s Linux. Of course I can!</p>

<h3>The Plan</h3>

<p>I previosly set up a Wireless Hotspot using the <a href="http://w1.fi/hostapd/">HostApd</a> user-space daemon on a small PC I had lying around at home, so I figured that this would also work on a Raspbery Pi. Granted, I would have some compiling in my future to make this work on ARM. Similarly, a few years ago, I was able to successfully establish an Internet Connection using a Huawei E220 USB Dongle and <a href="http://en.wikipedia.org/wiki/WvDial">WVDial</a>. In theory, everything was there, and I figured, all of this should be relatively easy&hellip;</p>

<h3>Icarus, Flying too close to the sun!</h3>

<p>The plan was simple&hellip; The implimentation was a bit more ambitions than I initially thought. To start off with, the D-Link USB WiFi Adapter I have, uses the <code>Realtek rtl8188cus</code> chipset which is not by default available in the HostApd build. This made it a bit difficuilt to get the Hotpsot up and running. Luckilly, Realtek provides the <code>rtl8188cus</code> drivers on their website <a href="http://www.realtek.com/downloads/downloadsView.aspx?Langid=1&amp;PFid=48&amp;Level=5&amp;Conn=4&amp;ProdID=274&amp;DownTypeID=3&amp;GetDown=false&amp;Downloads=true#2742">Here</a> which includes a customized version of HostApd that works with the <code>rtl8188cus</code> chipset. The second problem was that WVDial was useless with the Huawei K4305 Dongle since the device no longer exposes a Serial Device to establish a connection like the E220. Like most of the newer generation dongles, this dongle is a MBIM (Mobile Broadband Implimentation) device which requires you to do some USB Switching in order to expose an ethernet device that you can connect through.</p>

<h3>A Slice of Pi.</h3>

<p>For my little makeshift HotSpot, I used the latest version of Raspbian, downloaded from the <a href="http://www.raspberrypi.org/downloads/">Raspberry Pi Foundation Website</a>. I am not going to go through installing Raspbian in this post, maybe in the future.</p>

<h3>Switching to crying.</h3>

<p>Lets start with getting the Huawei K4305 Modem to work. The MBIM standard specifies that the dongle will have different USB operation modes in which it can be attached to your computer. Mode 1 is usually a Flash Storage mode which has the Drivers and the switching message for your operating system. Once the drivers and software is installed, the switching message will be sent to the device, to switch it to Mode 2. This mode is a virtual ethernet adapter which allows you to use the device as an Internet Gateway. On OSX and Windows this is easily done by the Firmware available on the device, but as far as I can determine, there is no Linux packages available for these devices.</p>

<h3>Enter USB_ModeSwitch.</h3>

<p>Linux being Linux however, there is always some community based software that makes it a little bit easier. In this case, <a href="http://www.draisberghof.de/usb_modeswitch/">USB_ModeSwitch</a></p>

<p>USB_ModeSwitch is (surprise!) a mode switching tool for controlling <code>multi-mode</code> USB devices. It&rsquo;s a software tool that uses the <a href="http://www.libusb.org/">libusb</a> framework to interact directly with the USB Device and switch the modes of the device, based on a ControlMessage and desired operational mode.</p>

<p>Before installing USB_ModeSwitch, this is the <code>lsusb</code> output you will see when the device is connected.
<code>bash lsusb
Bus 001 Device 004: ID 12d1:1f15 Huawei Technologies Co., Ltd.
</code></p>

<p>This mode is pretty much useless to us, and we need to now install USB_ModeSwitch and configure it to get our device into the correct format.<br/>
Download the Latest versions of&hellip;<br/>
<a href="http://www.draisberghof.de/usb_modeswitch/#download">USB_ModeSwithch</a><br/>
<a href="http://www.draisberghof.de/usb_modeswitch/#download">USB_ModeSwitch-Data</a><br/>
<a href="http://www.libusb.org/">LibUSB</a></p>

<p>Unzip each of the tarbals into their respective folders.
<code>
tar -xvf name-of-tarbal
</code></p>

<p>The first thing we need to install is LibUSB.
<code>bash Compile LibUSB
cd /path/to/libusb/source
./configure
make
sudo make install
</code></p>

<p>This will compile and move the LibUSB library to the appropriate folders for USB_ModeSwitch to use later. Installing USB_ModeSwitch is quite a bit simpler.<br/>
<code>bash Install USB_ModeSwitch
cd /path/to/usb_modeswitch
sudo make install
</code></p>

<p>This will move the usb_modeswitch binaries to the relevant folders. Now we need to export the data-set rules for the known USB devices.
<code>bash Install USB_ModeSwitch Data
cd /path/to/usb_modeswitch-data
sudo make install
</code></p>

<p>The USB_ModeSwitch-data contains the device database and the rules file, including full paths which tells it how to work with specific devices, and how to switch them. So now we have the switcher installed, but we still need to tell it how to handle the Huawei K4305 device. We do this by adding a config file to the /etc/usb_modeswitch.d/ folder.</p>

<pre><code class="bash /etc/usb_modeswitch.d/10-huawei-k4305.conf">########################################################
# Huawei K4305
#
# Contributor: Dario

DefaultVendor= 0x12d1
DefaultProduct=0x1f15

TargetVendor=  0x12d1
TargetProduct= 0x1400

MessageContent="55534243123456780000000000000011062000000000000100000000000000"
</code></pre>

<p>I don&rsquo;t want to go into too much detail about this file, since it will take some time to explain the Vendor and Product ID&rsquo;s. But take a closer look at the DefaultVendor and DefaultProduct ID&rsquo;s and match them to the lsusb output earlier in the post. You can see they match up to the Mode1 ID&rsquo;s of the device. We want USB_ModeSwitch to switch it to Mode2 with the TargetID&rsquo;s. The MessageContent is the message submitted to the device, in order to flip the device to the correct mode.</p>

<p>At this point, we plug in the device. Which should automatically switch the mode of the device, but just in case it doesn&rsquo;t you can manually run the command:</p>

<pre><code class="bash USB_ModeSwitch Device">usb_modeswitch -c /etc/usb_modeswitch.d/10-huawei-k4305.conf
</code></pre>

<p>Now, when you do lsusb, you should see the following
<code>bash lsusb
Bus 001 Device 004: ID 12d1:1400 Huawei Technologies Co., Ltd.
</code></p>

<p>As you can see, the Device is now mounted on the target endpoints, and when you do an ifconfig you should now see a new ethernet device eth1.
<code>bash ifconfig output
eth1      Link encap:Ethernet  HWaddr 58:2c:80:13:92:63  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:288212 errors:0 dropped:0 overruns:0 frame:0
          TX packets:241372 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:263381189 (251.1 MiB)  TX bytes:95811469 (91.3 MiB)
</code></p>

<p>At this point, you have your device mounted and you have a new cdc_ether device on eth1. But you still don&rsquo;t have internet connection. However, this part is actually stupidly easy. Its a network device&hellip; What is the easiest way to get IP Settings from a routing device? Thats right! DHCP!
<code>bash  Get the Device IP Details
sudo dhclient eth1
</code></p>

<p>This should now assign a new IP address in the 192.168.9.0/24 range. And should assign a new Default Gateway at 192.168.9.1.
<code>bash Ifconfig Output
eth1      Link encap:Ethernet  HWaddr 58:2c:80:13:92:63  
          inet addr:192.168.9.100  Bcast:192.168.9.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:288212 errors:0 dropped:0 overruns:0 frame:0
          TX packets:241372 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:263381189 (251.1 MiB)  TX bytes:95811469 (91.3 MiB)
</code></p>

<p>Congratulations! You now have a switched device and internet access! Woohoo! Which is great, but it&rsquo;s still only available on your Raspberry Pi. We now need to set up HostAPD for our HotSpot.</p>

<h3>Oh HostAPD, how you trick me so, you trickster.</h3>

<p>As mentioned previously in my post, the DLink USB Wifi Adapter I have uses the rtl8188cus chipset, which is a decent chipset, but doesn&rsquo;t play nice with the usual build of HostAPD. The guys at Realtek however were nice enough to add the HostAPD source to the rtl8188cus drivers. You can go through the whole process of recompiling it yourself, like I did. However, after I finally got mine compiled and working, I found a script that makes installing a Hotspot easier than crashing Windows.</p>

<pre><code class="bash Download and Install HostAPD">curl -kLsO "https://dl.dropboxusercontent.com/u/1663660/scripts/install-rtl8188cus.sh"
chmod +x install-rtl8188cus.sh
sudo ./install-rtl8188cus.sh
</code></pre>

<p>This script is created by &ldquo;Paul&rdquo; and the original post can be found <a href="http://blog.sip2serve.com/post/48899893167/rtl8188-access-point-install-script">here</a>. It simply asks you a few questions about your environment and sets up your Wifi Hotspot.</p>

<h3>Surfin&hellip;Surfin Mossel Baaaay!</h3>

<p>Thats it folks! My family now has a working Raspberry Pi powered Hotspot for their Holiday. I went a bit further and installed some QOS software and caching software to save some data and bandwith since there is about 12 devices on the hotspot. But you can now customize your hotspot in any way you want!</p>

<p>The caching turned out to be a great idea, since it seems like they are mostly viewing the same photos and sharing the same content between each other. Which is funny, when you think they are literally standing next to each other when they do it. Hahaha.</p>

<p>I&rsquo;m just happy I get to watch Marco Polo on <a href="http://www.netflix.com">Netflix</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O! What a Beautiful BASHing!]]></title>
    <link href="http://blog.mandusmomberg.com/blog/2014/12/01/o-what-a-beautiful-bashing/"/>
    <updated>2014-12-01T18:52:58+02:00</updated>
    <id>http://blog.mandusmomberg.com/blog/2014/12/01/o-what-a-beautiful-bashing</id>
    <content type="html"><![CDATA[<p>On a daily basis I get faced with interesting problems for which I need to find simple and elegant solutions. The problem though is that these solutions need to work across a large, very diverse, set of environments. So I can&rsquo;t rely on languages like Ruby or Python to always solve my problems, because, the truth is, the environment in which the solution needs to work might not have it installed. But there is one thing, a common denominator across almost all Linux environments that I can comfortably rely on.</p>

<p>BASH!</p>

<!-- More -->


<h3>Love is a strong word&hellip;</h3>

<p>I find myself loving BASH and the Linux toolchain more and more every time I use it. I have never been let down by BASH and scripting simple solutions to otherwise complex problems is a breeze with tools like <code>cat</code>, <code>grep</code>, <code>awk</code>, <code>cut</code> and many more.</p>

<p>Just this afternoon I was facing a problem where I needed to download a bunch of images from an <a href="http://imgur.com/">imgur</a> album that a friend of mine in the USA sent me. For some odd reason, the &ldquo;Download Album&rdquo; Link just wasn&rsquo;t working. So, I decided to throw some bash at it.</p>

<p>In about 5 minutes I had a working script that would take the imgur album URL and download all jpg images in that album to a folder I specify.
The main tool that I used for the backbone of this script was <a href="http://curl.haxx.se/docs/manpage.html">cURL</a>, and thus! THE imgur-curl was born!</p>

<h3>Olympic cURLing.</h3>

<p>Okay, Okay. So the heading is a tad excessive, and the &ldquo;curling&rdquo; I am doing in this script is minimal at best, but I just had to throw a &ldquo;Curling&rdquo; reference in there somewhere.</p>

<h4>So what is cURL?</h4>

<p><a href="http://curl.haxx.se/docs/manpage.html">cURL</a> is a tool to transfer data from or to a server, using one of the supported protocols. It has a busload full of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume, Metalink, and more that has gotten me out of quite a few &ldquo;slippery&rdquo; situations. (See what I did there? Slippery&hellip; Curling&hellip;. Ice.. Get it? )</p>

<p>Aaanyway&hellip; So, cURL has gotten me out of some pretty tough spots. From having to automate the provisioning of a very complex networking infrastructure, to something as simple as scraping a website for jpg links.
The way you can use it is virtually limited only by your imagination and it&rsquo;s got a tiny footprint on your environment&rsquo;s resources.</p>

<h3>We get it&hellip; Show us the script already!</h3>

<p>Hold your horses already&hellip; Good things are worth&hellip; Ugh, who am I kidding, here you go.</p>

<p><figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'> (imgur-curl.sh)</h3> <a href='/code/imgur-curl.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CURL_CHECK</span><span class="o">=</span><span class="k">$(</span>whereis curl <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$CURL_CHECK</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>	<span class="nb">echo </span>This script requires CURL
</span><span class='line'>	<span class="nb">echo </span>apt-get install curl or yum install curl
</span><span class='line'>	<span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">||</span> <span class="nv">$2</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>	<span class="nb">echo </span>Correct Usage imgr-curl URL Download_Directory
</span><span class='line'>	<span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>		
</span><span class='line'>
</span><span class='line'><span class="nv">CURL_GET</span><span class="o">=</span><span class="k">$(</span>curl -kL <span class="nv">$1</span><span class="k">)</span>
</span><span class='line'><span class="nv">IMG_SCRAPE</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$CURL_GET</span> <span class="p">|</span> grep -oE <span class="s1">&#39;\/\/i\.imgur.com\/\w*\.jpg&#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">for</span> url in <span class="nv">$IMG_SCRAPE</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>	<span class="nv">FILENAME</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$url</span> <span class="p">|</span> grep -oE <span class="s1">&#39;\w+\.jpg&#39;</span><span class="k">)</span>
</span><span class='line'>	<span class="nv">SMALL</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$FILENAME</span> <span class="p">|</span> grep -oE <span class="s1">&#39;\w{2,}s\.jpg&#39;</span><span class="k">)</span>
</span><span class='line'>		<span class="k">if</span> <span class="o">[</span> <span class="nv">$SMALL</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>			<span class="k">continue</span>
</span><span class='line'>		<span class="k">fi</span>
</span><span class='line'>	<span class="nb">echo </span>Fetching <span class="nv">$FILENAME</span> FROM http://i.imgur.com/<span class="nv">$FILENAME</span>
</span><span class='line'>	curl -kL http://i.imgur.com/<span class="nv">$FILENAME</span> -o <span class="s2">&quot;$2/$FILENAME&quot;</span> --create-dirs
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see, its a pretty simple script. Lines 2 - 13 is effectively there to make sure that the script will do what it is intended to do, download imgur jpg&rsquo;s with cURL.</p>

<p>Line 16 Is where the fun starts. On this line I set a variable CURL_GET to hold the output of my cURL request. I pass the options <code>-kL</code> to my request. I&rsquo;ll use this to do my scraping.<br/>
<code>-k</code> Tells cURL to ignore any SSL Certificate issues it might detect, and just continue going.<br/>
<code>-L</code> Tells cURL to adhere to any HTTP Redirects the server might issue and to follow them. If you don&rsquo;t do this, you might end up with a nice white page with text &ldquo;Permanently Moved&rdquo;</p>

<p>On Line 17 I set a new variable which will contain a list of imgur jpeg names that I scraped from the page.
I get these names by using <code>grep</code> and by passing <code>-o</code> and <code>-E</code> as arguments. <br/>
<code>-o</code> Tells grep to only display the parts that match my query<br/>
<code>-E</code> Allows me to define the query as a Regular Expression.</p>

<p>I&rsquo;m not going to go into much details on Regular Expressions in this post, but if you are interested, go over to <a href="http://regexr.com">RegExr</a>. Its a brillaint interactive website that makes learing and testing your Regular Expressions a breeze.</p>

<p>Lines 18 to 26 is a <a href="http://ss64.com/bash/for.html">for</a> loop that I use to iterate through the image names I stored in the IMG_SCRAPE variable and download them using curl.
The imgur page that I scrape for the links also have &ldquo;small&rdquo; files that are used as sortof thumbnails to make the page load faster. I do some addition checking in my for loop for these files, and if I detect it, I skip it and I don&rsquo;t download the image since I am only interested in the high quality images.</p>

<p>Now that I have the image name, I can download it from imgur using cURL. <br/>
I once again break out the same <code>-kL</code> arguments to follow redirects and ignore SSL issues but this time I add <code>-o</code> and <code>--create-dirs</code>.  <br/>
<code>-o</code> is shorthand for specifying the output directory where I want the content I&rsquo;m downloading to be stored. With <code>-o</code> I need to set the filename as well. You can use <code>-O</code> which will use the original filename.   <br/>
<code>--create-dirs</code> does exactly that, creates the directory I want to store the files if it does not exist.</p>

<h3>Is that it?</h3>

<p>Yup, pretty much that. Super, Simple Stuff. I told you. But it&rsquo;s only the beginning. It&rsquo;s now up to you to go ahead and expand on this and make it your own..</p>

<p>I decided to start a Github repository where I will be adding scripts that I find useful. There will be some oldies and some new ones as I keep developing them. If you want to take a look, you can find the repo here <a href="https://github.com/mandusm/BASH">Bash Script Repo</a></p>
]]></content>
  </entry>
  
</feed>
